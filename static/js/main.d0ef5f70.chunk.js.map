{"version":3,"sources":["components/Input.js","components/Gallery.js","components/Queries.js","components/Api.js","App.js","serviceWorker.js","index.js"],"names":["Input","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","values","handleChange","react_default","a","createElement","Fragment","type","name","className","placeholder","defaultValue","input","onChange","Component","Gallery","isLoaded","isError","isLoading","items","results","map","i","imgUrl","backgroundImage","urls","thumb","style","id","alt","alt_description","height","width","Queries","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","handleQuery","console","log","_this2","query","index","onClick","getPhotos","api","fetch","then","res","json","App","e","preventDefault","_e$target","target","setState","defineProperty","state","handleSearch","item","total","handleSave","push","_this$state","components_Input","components_Gallery","components_Queries","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0ef5f70.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class Input extends Component {\n\n    render() {\n        const { values, handleChange } = this.props;\n        return (\n            <React.Fragment>\n                <form>\n                    <input\n                        type={\"text\"}\n                        name={\"input\"}\n                        className={\"\"}\n                        placeholder={\"Search...\"}\n                        defaultValue={values.input}\n                        onChange={handleChange('input')}\n                    />\n                </form>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default Input;\n","import React, {Component} from 'react';\n\nexport class Gallery extends Component {\n\n    render() {\n        const {values} = this.props;\n\n        return (\n            <React.Fragment>\n                <div className={\"gallery\"}>\n\n                    {values.isLoaded && !values.isError && !values.isLoading\n                        ? values.items.results.map((i) => {\n\n                            let imgUrl = {\n                                backgroundImage: 'url(' + i.urls.thumb + ')'\n                            };\n\n                            return (\n                                <div\n                                    style={imgUrl}\n                                    key={i.id}\n                                    alt={i.alt_description}\n                                    className={i.height < i.width ? \"img__horizontal\" : \"img__vertical\"}\n                                />\n\n                            )\n                        })\n                        : values.isLoaded && values.isError && !values.isLoading\n                            ? \"No images found, please try another keywoard :)\"\n                            : values.isLoading\n                                ? \"Loading...\"\n                                : \"Your search images will show up here :)\"\n\n                    }\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default Gallery;\n","import React, {Component} from 'react';\n\nexport class Queries extends Component {\n\n    handleQuery = () => {\n        console.log(\"Should fetch query item data...\")\n    };\n\n    render() {\n        const {values} = this.props;\n        return (\n            <React.Fragment>\n                <div className={\"queries\"}>\n                    <ol>\n                        {values.query.length === 0\n                            ? \"Your query list is empty...\"\n                            : values.query.map((name, index) => {\n                                return (\n                                    <li\n                                        key={index}\n                                        onClick={this.handleQuery}\n                                    >{name}</li>\n                                )\n                            })\n                        }\n                    </ol>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Queries;\n\n\n","const getPhotos = (input, api) => (\n\n     fetch(`https://api.unsplash.com/search/photos?per_page=20&query=` + input + `&client_id=` + api)\n          .then(res => res.json())\n          .then(json => {\n            return json\n          })\n);\n\nexport default getPhotos;\n","import React, { Component } from 'react';\nimport './App.css';\nimport './styles/App.scss';\nimport Input from \"./components/Input\"\nimport Gallery from \"./components/Gallery\"\nimport Queries from \"./components/Queries\"\n\nimport getPhotos from './components/Api'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      isLoaded: false,\n      isLoading: false,\n      isError: false,\n      items: null,\n      query: []\n    };\n  }\n\n  handleChange = () => e => {\n    e.preventDefault();\n    const { name, value } = e.target;\n\n    this.setState({[name]: value}, () => console.log(this.state))\n  };\n\n  handleSearch = ( item ) => {\n\n    const APIkey = 'd9eb77c690a93b958ba751e8f0dd3e119897a50cfb3ab8006cd3a742dcde40e9';\n\n    this.setState({\n      isLoaded: false,\n      isLoading: true,\n      isError: false\n    });\n\n    getPhotos(this.state.input, APIkey)\n    // fetch(`https://api.unsplash.com/search/photos?query=` + this.state.input + `&client_id=` + APIkey)\n    //   .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          items: json,\n          isLoading: false,\n          isError: (\n            json.total === 0\n            ? true\n            : false\n          )\n        });\n      })\n  };\n\n  handleSave = () => {\n    if (this.state.input !== \"\" && this.state.isError !== true) {\n      this.state.query.push(this.state.input);\n      this.setState({query: this.state.query})\n    }\n  };\n\n  render() {\n\n    const { input, isLoaded, isLoading, isError, items, query } = this.state;\n    const values = { input, isLoaded, isLoading, isError, items, query };\n\n    return (\n      <div className=\"App\">\n        <div className={\"app__wrapper\"}>\n          <div className={\"content__wrapper\"}>\n            <div className={\"search\"}>\n              <Input\n                  handleChange={this.handleChange}\n                  values={values}\n              />\n            </div>\n            <Gallery\n                values={values}\n            />\n          </div>\n          <div className={\"sidebar__wrapper\"}>\n            <div className={\"buttons\"}>\n              <button\n                  className={\"buttons__btn\"}\n                  onClick={this.handleSearch}\n              >Search</button>\n              <button\n                  className={\"buttons__btn\"}\n                  onClick={this.handleSave}\n              >Save</button>\n            </div>\n            <Queries\n                values={values}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}